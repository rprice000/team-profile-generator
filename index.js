
// Node.js module packages
const inquirer = require('inquirer');
const fs = require('fs'); 

// Routes to Team Profile Classes and Javascript to Generate HTML
const Employee = require('./lib/Employee');
const Engineer = require('./lib/Engineer');
const Intern = require('./lib/Intern');
const Manager = require('./lib/Manager');
const generateHTML = require('./src/generateHTML');

// Creates Array of Employee Profiles generated by user input
const profilesArray = [];

// Function to collected manager data
const teamManager = () => {
    return inquirer.prompt ([
        {
            type: 'input',
            name: 'name',
            message: 'Who is the manager of this team?', 
        },
        {
            type: 'input',
            name: 'id',
            message: "Please enter the manager's ID.",
        },
        {
            type: 'input',
            name: 'email',
            message: "Please enter the manager's email.",
        },
        {
            type: 'input',
            name: 'officeNumber',
            message: "Please enter the manager's office number",
        }
    ])
// 
    .then(managerData => {
// Collects manager data places in Manager Object Class parameters
        const  { name, id, email, officeNumber } = managerData;
        const manager = new Manager (name, id, email, officeNumber);
// Takes manager class object and pushes to profiles array
        profilesArray.push(manager); 
    })
};

// Function to collected team member data
const teamMembers = () => {
    return inquirer.prompt ([
        {
            type: 'list',
            name: 'role',
            message: "Please choose your employee's role",
            choices: ['Engineer', 'Intern']
        },
        {
            type: 'input',
            name: 'name',
            message: "What's the name of the employee?", 
        },
        {
            type: 'input',
            name: 'id',
            message: "Please enter the employee's ID.",
        },
        {
            type: 'input',
            name: 'email',
            message: "Please enter the employee's email.",
        },
        {
            type: 'input',
            name: 'github',
            message: "Please enter the employee's github username.",
            when: (input) => input.role === "Engineer",
        },
        {
            type: 'input',
            name: 'school',
            message: "Please enter the intern's school",
            when: (input) => input.role === "Intern",
        },
        {
            type: 'confirm',
            name: 'addTeamMember',
            message: 'Would you like to add more team members?',
            default: false
        }
    ])
    .then(userData => {
// Collects team member data places in Engineer/Intern Object Class parameters
        let { name, id, email, role, github, school, addTeamMember } = userData;
// Create newEmployee variable to hold individual employee object data
        let newEmployee; 
// If user selects Engineer Data will be organized as Engineer Object Class
        if (role === "Engineer") {
            newEmployee = new Engineer (name, id, email, github);
// If user selects Intern Data will be organized as Intern Object Class
        } else if (role === "Intern") {
            newEmployee = new Intern (name, id, email, school);
        }
// Takes new employee object data and places into profiles array
        profilesArray.push(newEmployee);
// If user needs to add more employees teamMembers will return 
        if (addTeamMember) {
            return teamMembers(profilesArray);
// If user does not need to add more profilesArray will be complete 
        } else {
            return profilesArray;
        }
    })
}

// Method to take user answers and create Index.html
const writeFile = answers => {
    fs.writeFile('./dist/index.html', answers, err => {
// Error message if method fails
        if (err) {
            console.log(err);
            return;
        }
// Message if method process completes
        else {
            console.log('Team Profiles have been created on index.html.')
        }
    })
};

// Calls teamManager fucntion
teamManager()
// Calls teamMembers function
    .then(teamMembers)
// Function call to take profiles array and have data run through generateHTML scripts
    .then(profilesArray => {
        return generateHTML(profilesArray);
    })
// Function call to take generateHTML profiles and write to index.html
    .then(profilesHTML => {
        return writeFile(profilesHTML);
    })
    .catch(err => {
        console.log(err);
    });


